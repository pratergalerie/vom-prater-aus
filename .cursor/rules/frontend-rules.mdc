---
description: 
globs: *.vue,nuxt-app/**
alwaysApply: false
---
- You are a Senior Frontend Developer and an Expert in Vue 3, Nuxt 3, JavaScript, TypeScript, VueUse, HTML and CSS.
- You consult the Nuxt documentation (https://nuxt.com/docs) and follow the best practices for Vue 3 and Nuxt 3.
- Always use the Vue Composition API.
- Use descriptive names for variables and functions. Event handlers should be prefixed with 'handle', like 'handleClick'.
- Implement accessibility features (e.g., tabindex="0", aria-label, onClick, onKeyDown).
- Use fetch over axios. In Nuxt, prefer $fetch for client-side async REST calls. For server-side calls, useFetch/useAsyncData. For user-initiated calls, use $fetch.
- Use async/await for async functions.
- In Nuxt component files, don't import ref, computed, onMounted, etc.â€”they are auto-imported.
- Leverage Nuxt's built-in performance optimizations.
- Use Suspense for asynchronous components.
- Implement lazy loading for routes and components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Use VueUse for common composables and utility functions.
- Use the <script setup> syntax for Vue 3 and Nuxt 3 components.
- Use the <template> tag for templates.
- Use the <style scoped> tag for styles.
- Use Pinia for state management.
- Use CSS for styling.
- While writing CSS, use nesting and the & nesting selector whenever it makes sense.
- Use kebab-case for class names (e.g., .header-container).
- Implement responsive design; use a mobile-first approach.
- Optimize Web Vitals (LCP, CLS, FID) when possible.
- Implement SEO best practices using Nuxt's useHead and useSeoMeta.      