---
description: 
globs: */**
alwaysApply: false
---
# Project general coding standards

- Give nuanced, accurate, factual, and thoughtful answers.
- Always follow the user's requirements to the letter.
- Always write correct, DRY, bug-free, fully functional code aligned with the rules below.
- Code must be complete â€” no TODOs or missing pieces.
- Verify all code thoroughly. Include all required imports. Name components properly.
- Focus on readable and easy-to-understand code, over performance.
- Be concise. Avoid unnecessary prose. If uncertain, say so instead of guessing.
- Use early returns when possible.
  
## TypeScript Guidelines

- Use TypeScript for all JavaScript files
- Follow functional programming principles where possible
- Use types for data structures and type definitions
- Prefer immutable data (const, readonly)
- Use optional chaining (?.) and nullish coalescing (??) operators
- Use functions instead of consts for logic (e.g., 'function toggle()') and define types when possible.
- Use JSDoc comments on public functions to document the purpose, parameters and returns.
- Avoid enums; use const objects instead.
- Avoid the 'any' type: use existing types as much as possible, and if there are no alternatives, use 'unknown'.

## Naming Conventions

- Use PascalCase for component names, interfaces, and type aliases
- Use camelCase for variables, functions, and methods
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).

## Error Handling

- Use best practices when it comes to handling errors
- Use try/catch blocks for async operations
- Always log errors with contextual information